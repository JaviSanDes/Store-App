{"version":3,"sources":["webpack:///./src/app/store/actions/AC_Auth.js","webpack:///./src/app/store/actions/orders.js","webpack:///./src/app/store/actions/shop.js","webpack:///./src/app/store/actions/menu.js","webpack:///./src/app/store/actions/index.js","webpack:///./src/app/tools/Spinner/Spinner.js","webpack:///./src/app/tools/Spinner/Spinner.css","webpack:///./node_modules/core-js/internals/whitespaces.js","webpack:///./node_modules/core-js/modules/es.string.trim.js","webpack:///./node_modules/core-js/internals/string-trim.js","webpack:///./node_modules/core-js/internals/forced-string-trim-method.js","webpack:///./src/app/tools/Button/Button.js","webpack:///./src/app/tools/Button/Button.css","webpack:///./src/app/tools/Input/Input.js","webpack:///./node_modules/@babel/runtime/helpers/extends.js","webpack:///./src/app/tools/Input/Input.css","webpack:///./src/app/pages/Auth/Auth.css","webpack:///./src/app/pages/Auth/Auth.js"],"names":["authSuccess","token","userID","userName","type","actionTypes","idToken","logOut","Cookies","remove","path","auth","email","password","name","isSignup","dispatch","authStart","authData","url","axios","post","then","response","data","id","_id","Object","entries","headers","set","catch","error","authError","authCheckState","get","userId","sendOrder","purchaseOrderSuccess","value","purchaseOrder","orderData","purchaseOrderStart","initialState","purchaseOrderFail","fetchOrders","fetchOrdersStart","params","res","fetchedOrders","orders","fetchOrdersSuccess","err","fetchOrdersFail","orderSumaryAdd","getProductStart","getProducts","payload","setProducts","console","log","getMenuSelectedProducts","selected","foo","menuSelected","getSearchProduct","searchProduct","spinner","className","classes","Loader","module","exports","$","$trim","trim","target","proto","forced","forcedStringTrimMethod","this","requireObjectCoercible","whitespace","ltrim","RegExp","rtrim","createMethod","TYPE","$this","string","String","replace","start","end","fails","whitespaces","METHOD_NAME","button","props","disabled","Button","btnType","join","onClick","clicked","children","input","inputElement","inputClasses","InputElement","invalid","shouldValidate","touched","push","Invalid","elementType","elementConfig","onChange","changed","options","map","option","displayValue","Input","_extends","assign","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","to","Auth","Component","state","buttonContent","orderForm","placeholder","validation","required","isEmail","valid","ConfirmEmail","minLength","ConfirmPassword","passwor","formValid","signToggle","height","orderHandler","event","preventDefault","onAuth","inputChangedHandler","inputIdentifier","updatedOrderForm","updatedFormElement","checkValidity","formIsValid","setState","selector","e","refs","signINRef","style","color","borderBottom","boxShadow","signIN","signUPRef","signUP","childNodes","title","rules","isValid","maxLength","test","isNumeric","render","formElementsArray","redirect","config","form","onSubmit","formElement","label","loading","isAuthenticated","errorMessage","MessageBox","ContactData","selectorBox","ref","signInP","toggle","signIn","line","connect","order","orderCreated","actions"],"mappings":"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","file":"js/7.964a5f0efbf7f99f83f8.js","sourcesContent":["import axios from 'axios';\nimport * as actionTypes from './ActionTypes';\nimport Cookies from \"js-cookie\"\n\nexport const authStart= () => {\n  return {\n    type: actionTypes.AUTH_START\n  }\n}\n\nexport const authSuccess= (token, userID, userName) => {\n  return {\n    type: actionTypes.AUTH_SUCCESS,\n    idToken: token,\n    userID: userID,\n    userName: userName\n  }\n}\n\nexport const authError= (error) => {\n  return {\n    type: actionTypes.AUTH_ERROR,\n    error: error\n  }\n}\n\nexport const logOut= () => {\n  Cookies.remove('token', { path: '' });\n  Cookies.remove('userId', { path: '' });\n  Cookies.remove('userName', { path: '' });\n  return {\n    type: actionTypes.AUTH_LOGOUT\n  }\n}\n\nexport const auth= (email, password, name, isSignup) => {\n  return dispatch => {\n      dispatch(authStart());\n      let authData = null;\n      isSignup ? authData= {\n                  email: email,\n                  password: password,\n                  name: name\n                } :\n                authData= {\n                  email: email,\n                  password: password\n                }\n      let url= null;\n      isSignup ? url= 'https://boiling-escarpment-88964.herokuapp.com/api/users' : url= 'https://boiling-escarpment-88964.herokuapp.com/api/auth';\n      axios.post(url, authData)\n        .then(response => {\n            let name = response.data.name;\n            let id = response.data._id;\n            let token = Object.entries(response.headers)[1];\n            token = token[1];\n            Cookies.set('token', token);\n            Cookies.set('userId', id);\n            Cookies.set('touserNameken', name);\n            dispatch(authSuccess(token, id, name));\n        })\n        .catch(error => {\n            dispatch(authError(error.response.data.error));\n        });\n  };\n};\n\n\nexport const authCheckState = () => {\n    return dispatch => {\n        const token = Cookies.get('token');\n        if (token) {\n          const userId = Cookies.get('userId');\n          const userName = Cookies.get('userName');\n          dispatch(authSuccess(token, userId, userName));\n        }\n    };\n};\n","import * as actionTypes from './ActionTypes';\nimport axios from 'axios';\n\n\nexport const initialState= () =>   {\n  return {\n    type: actionTypes.INITIAL_STATE\n  }\n}\n\nexport const sendOrder= (token) => {\n  return {\n    type: actionTypes.SEND_ORDER,\n    token:token\n  }\n}\n\nexport const purchaseOrderSuccess = (value) => {\n    return {\n        type: actionTypes.PURCHASE_ORDER_SUCCESS,\n        value: value\n    };\n};\n\nexport const purchaseOrderFail = ( error ) => {\n    return {\n        type: actionTypes.PURCHASE_ORDER_FAIL,\n        error: error\n    };\n}\n\nexport const purchaseOrderStart = () => {\n    return {\n        type: actionTypes.PURCHASE_ORDER_START\n    };\n};\n\nexport const purchaseOrder = ( orderData, token) => { \n    return dispatch => {\n        dispatch( purchaseOrderStart() );\n        let headers = {\n          'Content-Type': 'application/json',\n          'x-auth-token': token\n        }\n        axios.post('https://boiling-escarpment-88964.herokuapp.com/api/order', orderData, {headers: headers})\n            .then( response => {\n                dispatch(initialState());\n                dispatch(purchaseOrderSuccess(true));\n            })\n            .catch( error => {\n                dispatch( purchaseOrderFail( error ) );\n            } );\n    };\n};\n\nexport const fetchOrdersStart= () =>{\n  return {\n    type: actionTypes.FETCH_ORDERS_START\n  }\n}\n\nexport const fetchOrdersSuccess= (orders) => {\n  return {\n    type: actionTypes.FETCH_ORDERS_SUCCESS,\n    orders: orders\n  }\n}\n\nexport const fetchOrdersFail= (error) => {\n  return {\n    type: actionTypes.FETCH_ORDERS_FAIL,\n    error: error\n  }\n}\n\nexport const fetchOrders = (token, userId) => {\n    return dispatch => {\n        dispatch(fetchOrdersStart());\n        let headers = {\n          'Content-Type': 'application/json',\n          'x-auth-token': token\n        }\n        axios.get( 'https://boiling-escarpment-88964.herokuapp.com/api/order', {headers: headers, params: {id: userId}})\n            .then( res => {\n                const fetchedOrders = [...res.data];\n                dispatch(fetchOrdersSuccess(fetchedOrders));\n            })\n            .catch( err => {\n                dispatch(fetchOrdersFail(err));\n            } );\n    };\n};\n","import * as actionTypes from './ActionTypes';\n\nexport const orderSummaryReset = () => {\n  return {\n    type: actionTypes.ORDER_SUMARY_RESET\n  }\n}\n\nexport const orderSumaryAdd= () => {\n  return {\n    type: actionTypes.ORDER_SUMMARY_ADD\n  }\n}\n","import * as actionTypes from './ActionTypes';\r\nimport axios from 'axios';\r\n\r\nexport const getProductStart= () => {\r\n  return {\r\n    type: actionTypes.LOADING_PRODUCTS\r\n  }\r\n}\r\n\r\nexport const setProducts= (payload) => {\r\n  return {\r\n    type: actionTypes.SET_PRODUCTS,\r\n    payload: payload\r\n  }\r\n}\r\n\r\nexport const getProducts= () => {\r\n  return dispatch => {\r\n    dispatch(getProductStart());\r\n    let payload = null;\r\n    axios.get('https://boiling-escarpment-88964.herokuapp.com/api/alimentos')\r\n        .then( response => {\r\n            payload = [...response.data];\r\n            dispatch(setProducts(payload));\r\n        } )\r\n        .catch( error => {\r\n            console.log(\"error\")\r\n        } );\r\n    };\r\n}\r\n\r\nexport const menuSelected= (payload) => {\r\n  return {\r\n    type: actionTypes.MENU_SELECTED,\r\n    payload: payload\r\n  }\r\n}\r\n\r\nexport const getMenuSelectedProducts= (selected) => {\r\n  return dispatch => {\r\n    dispatch(getProductStart());\r\n    let payload = null;\r\n    axios.get('https://boiling-escarpment-88964.herokuapp.com/api/alimentos/selected',  {params: {foo: selected}})\r\n        .then( response => {\r\n            payload = [...response.data];\r\n            dispatch(menuSelected(payload));\r\n        } )\r\n        .catch( error => {\r\n            dispatch( purchaseOrderFail( error ) );\r\n        } );\r\n    };\r\n}\r\n\r\nexport const searchProduct = (payload) => {\r\n  return {\r\n    type: actionTypes.SEARCH_PRODUCT,\r\n    payload: payload\r\n  }\r\n}\r\n\r\nexport const getSearchProduct= (selected) => {\r\n  return dispatch => {\r\n    dispatch(getProductStart());\r\n    let payload = null;\r\n    axios.get('https://boiling-escarpment-88964.herokuapp.com/api/alimentos/search',  {params: {foo: selected}})\r\n        .then( response => {\r\n              payload = [...response.data];\r\n              dispatch(searchProduct(payload));\r\n        } )\r\n        .catch( error => {\r\n            dispatch( purchaseOrderFail( error ) );\r\n        } );\r\n    };\r\n}\r\n","export {\n    auth,\n    logOut,\n    setAuthRedirectPath,\n    authCheckState\n} from './AC_Auth';\nexport {\n    initialState,\n    sendOrder,\n    purchaseOrder,\n    purchaseOrderSuccess,\n    purchaseOrderFail,\n    purchaseOrderStart,\n    fetchOrders,\n    orderSuccessToggle\n} from './orders';\nexport {\n  orderSummaryReset,\n  orderSumaryAdd\n}from './shop';\nexport {\n  menuSelected,\n  setProducts,\n  getMenuSelectedProducts,\n  searchProduct,\n  getProducts,\n  getSearchProduct\n}from './menu'\n","import React from 'react';\n\nimport classes from './Spinner.css';\n\nconst spinner = () => (\n    <div className={classes.Loader}>Loading...</div>\n);\n\nexport default spinner;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Loader\":\"Loader___147Oo\",\"loader\":\"Loader___147Oo\",\"load2\":\"load2___-I8O3\"};","// a string of all valid unicode whitespaces\n// eslint-disable-next-line max-len\nmodule.exports = '\\u0009\\u000A\\u000B\\u000C\\u000D\\u0020\\u00A0\\u1680\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u3000\\u2028\\u2029\\uFEFF';\n","'use strict';\nvar $ = require('../internals/export');\nvar $trim = require('../internals/string-trim').trim;\nvar forcedStringTrimMethod = require('../internals/forced-string-trim-method');\n\n// `String.prototype.trim` method\n// https://tc39.github.io/ecma262/#sec-string.prototype.trim\n$({ target: 'String', proto: true, forced: forcedStringTrimMethod('trim') }, {\n  trim: function trim() {\n    return $trim(this);\n  }\n});\n","var requireObjectCoercible = require('../internals/require-object-coercible');\nvar whitespaces = require('../internals/whitespaces');\n\nvar whitespace = '[' + whitespaces + ']';\nvar ltrim = RegExp('^' + whitespace + whitespace + '*');\nvar rtrim = RegExp(whitespace + whitespace + '*$');\n\n// `String.prototype.{ trim, trimStart, trimEnd, trimLeft, trimRight }` methods implementation\nvar createMethod = function (TYPE) {\n  return function ($this) {\n    var string = String(requireObjectCoercible($this));\n    if (TYPE & 1) string = string.replace(ltrim, '');\n    if (TYPE & 2) string = string.replace(rtrim, '');\n    return string;\n  };\n};\n\nmodule.exports = {\n  // `String.prototype.{ trimLeft, trimStart }` methods\n  // https://tc39.github.io/ecma262/#sec-string.prototype.trimstart\n  start: createMethod(1),\n  // `String.prototype.{ trimRight, trimEnd }` methods\n  // https://tc39.github.io/ecma262/#sec-string.prototype.trimend\n  end: createMethod(2),\n  // `String.prototype.trim` method\n  // https://tc39.github.io/ecma262/#sec-string.prototype.trim\n  trim: createMethod(3)\n};\n","var fails = require('../internals/fails');\nvar whitespaces = require('../internals/whitespaces');\n\nvar non = '\\u200B\\u0085\\u180E';\n\n// check that a method works with the correct list\n// of whitespaces and has a correct name\nmodule.exports = function (METHOD_NAME) {\n  return fails(function () {\n    return !!whitespaces[METHOD_NAME]() || non[METHOD_NAME]() != non || whitespaces[METHOD_NAME].name !== METHOD_NAME;\n  });\n};\n","import React from 'react';\n\nimport classes from './Button.css';\n\nconst button = (props) => (\n    <button\n        disabled={props.disabled}\n        className={[classes.Button, classes[props.btnType]].join(' ')}\n        onClick={props.clicked}>{props.children}</button>\n);\n\nexport default button;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Button\":\"Button___DaMp8\",\"button\":\"Button___DaMp8\",\"Success\":\"Success___3hyAv\",\"success\":\"Success___3hyAv\",\"Danger\":\"Danger___GTkkK\",\"danger\":\"Danger___GTkkK\"};","import React from 'react';\n\nimport classes from './Input.css';\n\nconst input = ( props ) => {\n    let inputElement = null;\n    const inputClasses = [classes.InputElement];\n\n    if (props.invalid && props.shouldValidate && props.touched) {\n        inputClasses.push(classes.Invalid);\n    }\n\n    switch ( props.elementType ) {\n        case ( 'input' ):\n            inputElement = <input\n                className={inputClasses.join(' ')}\n                {...props.elementConfig}\n                value={props.value}\n                onChange={props.changed} />;\n            break;\n        case ( 'textarea' ):\n            inputElement = <textarea\n                className={inputClasses.join(' ')}\n                {...props.elementConfig}\n                value={props.value}\n                onChange={props.changed} />;\n            break;\n        case ( 'select' ):\n            inputElement = (\n                <select\n                    className={inputClasses.join(' ')}\n                    value={props.value}\n                    onChange={props.changed}>\n                    {props.elementConfig.options.map(option => (\n                        <option key={option.value} value={option.value}>\n                            {option.displayValue}\n                        </option>\n                    ))}\n                </select>\n            );\n            break;\n        default:\n            inputElement = <input\n                className={inputClasses.join(' ')}\n                {...props.elementConfig}\n                value={props.value}\n                onChange={props.changed} />;\n    }\n\n    return (\n        <div className={classes.Input}>\n            {inputElement}\n        </div>\n    );\n\n};\n\nexport default input;\n","function _extends() {\n  module.exports = _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nmodule.exports = _extends;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input___1iUeL\",\"input\":\"Input___1iUeL\",\"InputElement\":\"InputElement___1yLxX\",\"inputElement\":\"InputElement___1yLxX\",\"Invalid\":\"Invalid___Li_eY\",\"invalid\":\"Invalid___Li_eY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"ContactData___2mH95\",\"contactData\":\"ContactData___2mH95\",\"MessageBox\":\"MessageBox___3ZF78\",\"messageBox\":\"MessageBox___3ZF78\",\"selectorBox\":\"selectorBox___27WFE\",\"signIn\":\"signIn___1Bwt5\",\"toggle\":\"toggle___375my\",\"line\":\"line___2MFF1\",\"signInP\":\"signInP___n6asE\"};","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport * as actions from '../../store/actions/index';\nimport { Redirect } from 'react-router-dom'\n\nimport Button from '../../tools/Button/Button';\nimport Spinner from '../../tools/Spinner/Spinner';\nimport Input from '../../tools/Input/Input';\nimport classes from './Auth.css';\n\nclass Auth extends Component {\n    state = {\n        buttonContent: 'SIGN IN',\n        orderForm: {\n            name: {\n                elementType: 'input',\n                elementConfig: {\n                    type: '',\n                    placeholder: 'NickName'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    isEmail: false\n                },\n                valid: false,\n                touched: false\n            },\n            email: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'email',\n                    placeholder: 'Mail Address'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    isEmail: true\n                },\n                valid: false,\n                touched: false\n            },\n            ConfirmEmail: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'email',\n                    placeholder: 'Confirm Mail Address'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    isEmail: true\n                },\n                valid: false,\n                touched: false\n            },\n            password: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'password',\n                    placeholder: 'Password'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    minLength: 6\n                },\n                valid: false,\n                touched: false\n            },\n            ConfirmPassword: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'password',\n                    placeholder: 'Confirm Password'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    minLength: 6\n                },\n                valid: false,\n                touched: false\n            }\n\n        },\n        isSignup: false,\n        email: false,\n        passwor: false,\n        formValid: false,\n        signToggle: true,\n        height: 300\n    }\n    orderHandler = ( event ) => {\n        event.preventDefault();\n        const email = this.state.orderForm['email'].value;\n        const password = this.state.orderForm['password'].value;\n        const name = this.state.orderForm['name'].value;\n        this.props.onAuth( email, password, name, this.state.isSignup );\n    }\n\n    checkValidity(value, rules) {\n        let isValid = true;\n        if (!rules) {\n            return true;\n        }\n\n        if (rules.required) {\n            isValid = value.trim() !== '' && isValid;\n        }\n\n        if (rules.minLength) {\n            isValid = value.length >= rules.minLength && isValid\n        }\n\n        if (rules.maxLength) {\n            isValid = value.length <= rules.maxLength && isValid\n        }\n\n        if (rules.isEmail) {\n            const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n            isValid = pattern.test(value) && isValid\n        }\n\n        if (rules.isNumeric) {\n            const pattern = /^\\d+$/;\n            isValid = pattern.test(value) && isValid\n        }\n\n        return isValid;\n    }\n\n    inputChangedHandler = (event, inputIdentifier) => {\n        const updatedOrderForm = {\n            ...this.state.orderForm\n        };\n        const updatedFormElement = {\n            ...updatedOrderForm[inputIdentifier]\n        };\n        updatedFormElement.value = event.target.value;\n        updatedFormElement.valid = this.checkValidity(updatedFormElement.value, updatedFormElement.validation);\n        updatedFormElement.touched = true;\n        updatedOrderForm[inputIdentifier] = updatedFormElement;\n\n        let formIsValid = true;\n        for (let inputIdentifier in updatedOrderForm) {\n            if (this.state.signToggle){\n                if(inputIdentifier == 'ConfirmEmail' || inputIdentifier == 'ConfirmPassword' || inputIdentifier == 'name'){\n                    updatedOrderForm[inputIdentifier].valid = true;\n                }\n            }\n            formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;\n        }\n        this.setState({orderForm: updatedOrderForm, formIsValid: formIsValid});\n    }\n\n    selector = (e) => {\n        const updatedOrderForm = {\n            ...this.state.orderForm\n        };\n        for (let inputIdentifier in updatedOrderForm) {\n            updatedOrderForm[inputIdentifier].value = '';\n            updatedOrderForm[inputIdentifier].valid = false;\n            updatedOrderForm[inputIdentifier].touched = false;\n        }\n        this.setState({orderForm: updatedOrderForm, formIsValid: false});\n\n        this.refs.signINRef.style.color='#808080;';\n        this.refs.signINRef.style.borderBottom='none';\n        this.refs.signINRef.style.boxShadow= 'none';\n        this.refs.signIN.style.color = '#808080';\n\n        this.refs.signUPRef.style.color='#808080;';\n        this.refs.signUPRef.style.borderBottom='none';\n        this.refs.signUPRef.style.boxShadow= 'none';\n        this.refs.signUP.style.color = '#808080';\n        \n        e.target.childNodes[0].style.borderBottom='2px solid rgb(26, 117, 255)';\n        e.target.childNodes[0].style.boxShadow= '0px 0px 2px 1px rgb(26, 117, 255)';\n        this.setState({buttonContent: e.target.childNodes[0].title});\n\n        if (e.target.childNodes[0].title === 'SIGN IN') {\n            this.refs.signIN.style.color = 'black';\n            this.setState({isSignup: false, height: 300, signToggle: true});\n        } else if (e.target.childNodes[0].title === 'SIGN UP'){\n            this.refs.signUP.style.color = 'black';\n            this.setState({isSignup: true, height: 400, signToggle: false});\n        } \n    }\n\n    render () {\n        const formElementsArray = [];\n        let redirect = null;\n        for (let key in this.state.orderForm) {\n            if(this.state.signToggle) {\n                if(key == 'email' || key == 'password') {\n                    formElementsArray.push({\n                        id: key,\n                        config: this.state.orderForm[key]\n                    });\n                }\n            }else {\n                formElementsArray.push({\n                    id: key,\n                    config: this.state.orderForm[key]\n                });\n            }\n            \n            \n        }\n        let form = (\n            <form onSubmit={this.orderHandler}>\n                {formElementsArray.map(formElement => (\n                    <Input\n                        key={formElement.id}\n                        elementType={formElement.config.elementType}\n                        elementConfig={formElement.config.elementConfig}\n                        value={formElement.config.value}\n                        label={formElement.config.value}\n                        invalid={!formElement.config.valid}\n                        shouldValidate={formElement.config.validation}\n                        touched={formElement.config.touched}\n                        changed={(event) => this.inputChangedHandler(event, formElement.id)} />\n                ))}\n                <Button btnType=\"Success\" disabled={!this.state.formIsValid}>SIGN</Button>\n            </form>\n        );\n        if(this.props.loading){\n          form=(<Spinner />)\n        }\n        if(this.props.isAuthenticated) {\n            redirect = (<Redirect to='/' />);\n        }\n        let errorMessage = null;\n        if(this.props.error == true){\n            errorMessage = (\n                <p className={classes.MessageBox}>Login or Password incorrect.</p>\n            );\n        }\n        return (\n            <div className={classes.ContactData}>\n                {redirect}\n                <h4>Enter your Contact Data</h4>\n                <div className={classes.selectorBox}>\n                    <p ref={'signIN'} className={classes.signInP}>SIGN IN</p>\n                    <p ref={'signUP'}>SIGN UP</p>\n                </div>\n                <div className={classes.toggle} ref={'divRef'} onClick={(e) => this.selector(e)}>\n                    <div><div title=\"SIGN IN\" ref={'signINRef'} className={classes.signIn}></div></div>\n                    <div><div title=\"SIGN UP\" ref={'signUPRef'}></div></div>\n                </div>\n                <div className={classes.line}></div>\n                {form}\n                {errorMessage}\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        loading: state.order.loading,\n        error: state.auth.error,\n        isAuthenticated: state.auth.token !== null,\n        orderCreated: state.order.orderCreated\n    }\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onAuth: ( email, password, name, isSignup ) => dispatch( actions.auth( email, password, name, isSignup ) )\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);\n"],"sourceRoot":""}